set(DIR_COMMON      "${CMAKE_CURRENT_SOURCE_DIR}/../include")
set(DIR_UTILS       "${CMAKE_CURRENT_SOURCE_DIR}/../utils")
set(DIR_GETOPERATOR "${CMAKE_CURRENT_SOURCE_DIR}/../getOperator")
set(DIR_SQL         "${CMAKE_CURRENT_SOURCE_DIR}/../sqlite-c")
set(DIR_HWWRITE     "${CMAKE_CURRENT_SOURCE_DIR}/../hw_write")
set(DIR_WRAPPER     "${CMAKE_CURRENT_SOURCE_DIR}/../wrapper")
set(DIR_PIVPAV      "${CMAKE_CURRENT_SOURCE_DIR}/../pivpavboom")


########### include & setup dirs ########### 
include_directories(${DIR_COMMON})

set (CMAKE_INCLUDE_PATH  "/home/mgrad/tools/include")
set (CMAKE_LIBRARY_PATH  "/home/mgrad/tools/lib")

########### change policies ########### 
# allow to change policies from include(file) 
cmake_policy(SET CMP0011 OLD)

# allow to have the same logical names for the add_library(libXXX .. )
# this is important when we try to compile the same project (such as util)
# twice, which happens when it's included multiple times.
cmake_policy(SET CMP0002 OLD)

# add_definition value needs to be manually escaped
cmake_policy(SET CMP0005 NEW)


########### DATABASE SETUP ########### 
add_definitions("-DDB_FILENAME=\"/home/mgrad/Work/scripts/test/test.db\"")


########### CHANGE DEFUALT BUILD_TYPE ########### 
set (DEF_TYPE RelWithDebInfo)

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE ${DEF_TYPE} CACHE STRING
        "Choose the type of build, options are: None Debug Release
        RelWithDebInfo MinSizeRel."
              FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

# print the build type and vals
if (NOT HAS_SHOWN_BUILD)
  string(TOUPPER ${CMAKE_BUILD_TYPE} build)
  set (USED_FLAGS_NAME "CMAKE_CXX_FLAGS_${build}")
  set (USED_FLAGS_VAL  "${${USED_FLAGS_NAME}}")
  message("\nBASE SETTINGS: ${CMAKE_CXX_FLAGS}")
  message("SELECTED BUILD TYPE:   ${CMAKE_BUILD_TYPE}")
  message("This will be added to the base settings")
  message("BUILD TYPE SETTINGS:   ${USED_FLAGS_NAME} = ${USED_FLAGS_VAL}\n")
  set (HAS_SHOWN_BUILD 1)
endif (NOT HAS_SHOWN_BUILD)
